name: Build and Package for ArchLinux

on:
  push:
    branches: [ "main" ]
    tags: [ "v*" ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # ---------- 1. 初始化 ----------
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          cache: true

      # ---------- 2. 构建二进制 ----------
      - name: Build Binary
        run: |
          GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -ldflags="-s -w" -o hiwifi-ssh-launcher .
          strip hiwifi-ssh-launcher

      # ---------- 3. 准备纯净构建环境 ----------
      - name: Prepare Clean Build Directory
        run: |
          # 创建干净的构建目录
          mkdir -p clean-build
          cp -r main.go go.mod go.sum LICENSE README.md hiwifi-ssh-launcher clean-build/
          cd clean-build
          
          # 准备版本号
          VERSION=${GITHUB_REF#refs/tags/v}
          [ -z "$VERSION" ] || [ "$VERSION" = "$GITHUB_REF" ] && VERSION="0.0.1"
          
          # 创建PKGBUILD和源包
          cat << 'EOF' > PKGBUILD
          pkgname=hiwifi-ssh-launcher
          pkgver=VERSION_PLACEHOLDER
          pkgrel=1
          pkgdesc="SSH Launcher for HiWiFi"
          arch=('x86_64')
          license=('MIT')
          source=("${pkgname}-${pkgver}.tar.gz")
          sha256sums=('SKiptests')

          build() {
            cd "${pkgname}-${pkgver}"
            go build -ldflags="-s -w" -o $pkgname .
          }

          package() {
            install -Dm755 "${srcdir}/${pkgname}-${pkgver}/${pkgname}" "${pkgdir}/usr/bin/${pkgname}"
          }
          EOF
          
          sed -i "s/VERSION_PLACEHOLDER/$VERSION/g" PKGBUILD
          mkdir -p "hiwifi-ssh-launcher-$VERSION"
          cp -r * "hiwifi-ssh-launcher-$VERSION"/
          rm "hiwifi-ssh-launcher-$VERSION/hiwifi-ssh-launcher-$VERSION.tar.gz" || true
          tar -czf "hiwifi-ssh-launcher-$VERSION.tar.gz" "hiwifi-ssh-launcher-$VERSION"

      # ---------- 4. 使用Arch容器构建 ----------
      - name: Build with Arch Container
        run: |
          cd clean-build
          
          # 使用一次性Arch容器构建
          docker run --rm \
            -v $(pwd):/build \
            -w /build \
            archlinux:latest \
            bash -c "
              pacman -Sy --noconfirm base-devel &&
              useradd -m builder &&
              chown -R builder:builder /build &&
              su builder -c 'cd /build && makepkg -s --noconfirm SKIPCHECKSUMS SKIPPGPCHECK'
            "
          
          # 复制生成的包到工作目录
          cp *.pkg.tar.zst ../

      # ---------- 5. 上传产物 ----------
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-assets
          path: |
            hiwifi-ssh-launcher
            *.pkg.tar.zst
